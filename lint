#!/bin/sh

hash tox 2>/dev/null || { echo >&2 "Program 'tox' >= 2 is required for linting..."; exit 1; }

tmpfile=
cleanup() {
	local code=$1
	[ -z "$tmpfile" ] || rm -f -- "$tmpfile"
	return $code
}

trap "cleanup $?" EXIT HUP INT QUIT TERM
tmpfile="$(mktemp)"


replace_whitespace() {
	local strings

	strings="$@"
	echo "$strings" | tr " " "\n"
}

replace_newline() {
	local strings

	strings="$@"
	echo "$strings" | tr "\n" " "
}

get_files() {
	local paths

	paths="${@:-.}"
	git ls-files "$paths" || return 1
}

get_files_mime() {
	local paths

	paths="$@"
	xargs file --mime-type -F '' "$paths" || return 1
}

get_py_files() {
	local paths

	paths="$@"
	get_files "$paths" | grep -E ".*\.py$" || return 1
}

get_py_mime_files() {
	local paths

	paths="$@"
	get_files "$paths" | grep -vE "\.\w+$" | get_files_mime | grep x-python | awk '{print $1}' || return 1
}


files=
py_files="$(get_py_files "$@")"
if [ ! -z "$py_files" ]; then
	files="$(replace_whitespace "$py_files")"
fi
py_mime_files="$(get_py_mime_files "$@")"
if [ ! -z "$py_mime_files" ];  then
	files="$(replace_whitespace "$files $py_mime_files")"
fi
files="$(replace_newline "$files")"

tox -e lint -- "--output-file=$tmpfile" $files > /dev/null || {
	[ -f $tmpfile ] && >&2 cat $tmpfile; exit 1;
}
